<?php

/**
 * Base class that represents a row from the 'user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 05/19/09 16:14:37
 *
 * @package    lib.model.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


  const PEER = 'UserPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the fname field.
	 * @var        string
	 */
	protected $fname;

	/**
	 * The value for the lname field.
	 * @var        string
	 */
	protected $lname;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the street field.
	 * @var        string
	 */
	protected $street;

	/**
	 * The value for the postal_code field.
	 * @var        string
	 */
	protected $postal_code;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the credentials field.
	 * @var        string
	 */
	protected $credentials;

	/**
	 * The value for the created_on field.
	 * @var        string
	 */
	protected $created_on;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the image_path field.
	 * @var        string
	 */
	protected $image_path;

	/**
	 * The value for the is_active field.
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * @var        array Booksforsale[] Collection to store aggregation of Booksforsale objects.
	 */
	protected $collBooksforsalesRelatedBySellerId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBooksforsalesRelatedBySellerId.
	 */
	private $lastBooksforsaleRelatedBySellerIdCriteria = null;

	/**
	 * @var        array Booksforsale[] Collection to store aggregation of Booksforsale objects.
	 */
	protected $collBooksforsalesRelatedByCheckedOutBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBooksforsalesRelatedByCheckedOutBy.
	 */
	private $lastBooksforsaleRelatedByCheckedOutByCriteria = null;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collComments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collComments.
	 */
	private $lastCommentCriteria = null;

	/**
	 * @var        array Sales[] Collection to store aggregation of Sales objects.
	 */
	protected $collSalessRelatedByBuyerId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSalessRelatedByBuyerId.
	 */
	private $lastSalesRelatedByBuyerIdCriteria = null;

	/**
	 * @var        array Sales[] Collection to store aggregation of Sales objects.
	 */
	protected $collSalessRelatedBySellerId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSalessRelatedBySellerId.
	 */
	private $lastSalesRelatedBySellerIdCriteria = null;

	/**
	 * @var        array Wishlist[] Collection to store aggregation of Wishlist objects.
	 */
	protected $collWishlists;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWishlists.
	 */
	private $lastWishlistCriteria = null;

	/**
	 * @var        array Courses[] Collection to store aggregation of Courses objects.
	 */
	protected $collCoursess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCoursess.
	 */
	private $lastCoursesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [fname] column value.
	 * 
	 * @return     string
	 */
	public function getFname()
	{
		return $this->fname;
	}

	/**
	 * Get the [lname] column value.
	 * 
	 * @return     string
	 */
	public function getLname()
	{
		return $this->lname;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [street] column value.
	 * 
	 * @return     string
	 */
	public function getStreet()
	{
		return $this->street;
	}

	/**
	 * Get the [postal_code] column value.
	 * 
	 * @return     string
	 */
	public function getPostalCode()
	{
		return $this->postal_code;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [credentials] column value.
	 * 
	 * @return     string
	 */
	public function getCredentials()
	{
		return $this->credentials;
	}

	/**
	 * Get the [optionally formatted] temporal [created_on] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedOn($format = 'Y-m-d H:i:s')
	{
		if ($this->created_on === null) {
			return null;
		}


		if ($this->created_on === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_on);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_on, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}


		if ($this->last_login === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [image_path] column value.
	 * 
	 * @return     string
	 */
	public function getImagePath()
	{
		return $this->image_path;
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [fname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setFname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fname !== $v) {
			$this->fname = $v;
			$this->modifiedColumns[] = UserPeer::FNAME;
		}

		return $this;
	} // setFname()

	/**
	 * Set the value of [lname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setLname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lname !== $v) {
			$this->lname = $v;
			$this->modifiedColumns[] = UserPeer::LNAME;
		}

		return $this;
	} // setLname()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = UserPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [street] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street !== $v) {
			$this->street = $v;
			$this->modifiedColumns[] = UserPeer::STREET;
		}

		return $this;
	} // setStreet()

	/**
	 * Set the value of [postal_code] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPostalCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postal_code !== $v) {
			$this->postal_code = $v;
			$this->modifiedColumns[] = UserPeer::POSTAL_CODE;
		}

		return $this;
	} // setPostalCode()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UserPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = UserPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [credentials] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setCredentials($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->credentials !== $v) {
			$this->credentials = $v;
			$this->modifiedColumns[] = UserPeer::CREDENTIALS;
		}

		return $this;
	} // setCredentials()

	/**
	 * Sets the value of [created_on] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setCreatedOn($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_on !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_on !== null && $tmpDt = new DateTime($this->created_on)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_on = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::CREATED_ON;
			}
		} // if either are not null

		return $this;
	} // setCreatedOn()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [image_path] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setImagePath($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->image_path !== $v) {
			$this->image_path = $v;
			$this->modifiedColumns[] = UserPeer::IMAGE_PATH;
		}

		return $this;
	} // setImagePath()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v) {
			$this->is_active = $v;
			$this->modifiedColumns[] = UserPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->fname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->lname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->city = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->street = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->postal_code = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->email = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->phone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->credentials = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->created_on = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->last_login = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->password = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->image_path = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->is_active = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collBooksforsalesRelatedBySellerId = null;
			$this->lastBooksforsaleRelatedBySellerIdCriteria = null;

			$this->collBooksforsalesRelatedByCheckedOutBy = null;
			$this->lastBooksforsaleRelatedByCheckedOutByCriteria = null;

			$this->collComments = null;
			$this->lastCommentCriteria = null;

			$this->collSalessRelatedByBuyerId = null;
			$this->lastSalesRelatedByBuyerIdCriteria = null;

			$this->collSalessRelatedBySellerId = null;
			$this->lastSalesRelatedBySellerIdCriteria = null;

			$this->collWishlists = null;
			$this->lastWishlistCriteria = null;

			$this->collCoursess = null;
			$this->lastCoursesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(UserPeer::CREATED_ON))
    {
      $this->setCreatedOn(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UserPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBooksforsalesRelatedBySellerId !== null) {
				foreach ($this->collBooksforsalesRelatedBySellerId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBooksforsalesRelatedByCheckedOutBy !== null) {
				foreach ($this->collBooksforsalesRelatedByCheckedOutBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collComments !== null) {
				foreach ($this->collComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSalessRelatedByBuyerId !== null) {
				foreach ($this->collSalessRelatedByBuyerId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSalessRelatedBySellerId !== null) {
				foreach ($this->collSalessRelatedBySellerId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWishlists !== null) {
				foreach ($this->collWishlists as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCoursess !== null) {
				foreach ($this->collCoursess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBooksforsalesRelatedBySellerId !== null) {
					foreach ($this->collBooksforsalesRelatedBySellerId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBooksforsalesRelatedByCheckedOutBy !== null) {
					foreach ($this->collBooksforsalesRelatedByCheckedOutBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collComments !== null) {
					foreach ($this->collComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSalessRelatedByBuyerId !== null) {
					foreach ($this->collSalessRelatedByBuyerId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSalessRelatedBySellerId !== null) {
					foreach ($this->collSalessRelatedBySellerId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWishlists !== null) {
					foreach ($this->collWishlists as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCoursess !== null) {
					foreach ($this->collCoursess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFname();
				break;
			case 2:
				return $this->getLname();
				break;
			case 3:
				return $this->getCity();
				break;
			case 4:
				return $this->getStreet();
				break;
			case 5:
				return $this->getPostalCode();
				break;
			case 6:
				return $this->getEmail();
				break;
			case 7:
				return $this->getPhone();
				break;
			case 8:
				return $this->getCredentials();
				break;
			case 9:
				return $this->getCreatedOn();
				break;
			case 10:
				return $this->getLastLogin();
				break;
			case 11:
				return $this->getPassword();
				break;
			case 12:
				return $this->getImagePath();
				break;
			case 13:
				return $this->getIsActive();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFname(),
			$keys[2] => $this->getLname(),
			$keys[3] => $this->getCity(),
			$keys[4] => $this->getStreet(),
			$keys[5] => $this->getPostalCode(),
			$keys[6] => $this->getEmail(),
			$keys[7] => $this->getPhone(),
			$keys[8] => $this->getCredentials(),
			$keys[9] => $this->getCreatedOn(),
			$keys[10] => $this->getLastLogin(),
			$keys[11] => $this->getPassword(),
			$keys[12] => $this->getImagePath(),
			$keys[13] => $this->getIsActive(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFname($value);
				break;
			case 2:
				$this->setLname($value);
				break;
			case 3:
				$this->setCity($value);
				break;
			case 4:
				$this->setStreet($value);
				break;
			case 5:
				$this->setPostalCode($value);
				break;
			case 6:
				$this->setEmail($value);
				break;
			case 7:
				$this->setPhone($value);
				break;
			case 8:
				$this->setCredentials($value);
				break;
			case 9:
				$this->setCreatedOn($value);
				break;
			case 10:
				$this->setLastLogin($value);
				break;
			case 11:
				$this->setPassword($value);
				break;
			case 12:
				$this->setImagePath($value);
				break;
			case 13:
				$this->setIsActive($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCity($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setStreet($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPostalCode($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEmail($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPhone($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCredentials($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCreatedOn($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setLastLogin($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPassword($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setImagePath($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIsActive($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
		if ($this->isColumnModified(UserPeer::FNAME)) $criteria->add(UserPeer::FNAME, $this->fname);
		if ($this->isColumnModified(UserPeer::LNAME)) $criteria->add(UserPeer::LNAME, $this->lname);
		if ($this->isColumnModified(UserPeer::CITY)) $criteria->add(UserPeer::CITY, $this->city);
		if ($this->isColumnModified(UserPeer::STREET)) $criteria->add(UserPeer::STREET, $this->street);
		if ($this->isColumnModified(UserPeer::POSTAL_CODE)) $criteria->add(UserPeer::POSTAL_CODE, $this->postal_code);
		if ($this->isColumnModified(UserPeer::EMAIL)) $criteria->add(UserPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UserPeer::PHONE)) $criteria->add(UserPeer::PHONE, $this->phone);
		if ($this->isColumnModified(UserPeer::CREDENTIALS)) $criteria->add(UserPeer::CREDENTIALS, $this->credentials);
		if ($this->isColumnModified(UserPeer::CREATED_ON)) $criteria->add(UserPeer::CREATED_ON, $this->created_on);
		if ($this->isColumnModified(UserPeer::LAST_LOGIN)) $criteria->add(UserPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(UserPeer::PASSWORD)) $criteria->add(UserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UserPeer::IMAGE_PATH)) $criteria->add(UserPeer::IMAGE_PATH, $this->image_path);
		if ($this->isColumnModified(UserPeer::IS_ACTIVE)) $criteria->add(UserPeer::IS_ACTIVE, $this->is_active);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFname($this->fname);

		$copyObj->setLname($this->lname);

		$copyObj->setCity($this->city);

		$copyObj->setStreet($this->street);

		$copyObj->setPostalCode($this->postal_code);

		$copyObj->setEmail($this->email);

		$copyObj->setPhone($this->phone);

		$copyObj->setCredentials($this->credentials);

		$copyObj->setCreatedOn($this->created_on);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setPassword($this->password);

		$copyObj->setImagePath($this->image_path);

		$copyObj->setIsActive($this->is_active);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getBooksforsalesRelatedBySellerId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBooksforsaleRelatedBySellerId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBooksforsalesRelatedByCheckedOutBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBooksforsaleRelatedByCheckedOutBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getComments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addComment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSalessRelatedByBuyerId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSalesRelatedByBuyerId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSalessRelatedBySellerId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSalesRelatedBySellerId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWishlists() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWishlist($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCoursess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCourses($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collBooksforsalesRelatedBySellerId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBooksforsalesRelatedBySellerId()
	 */
	public function clearBooksforsalesRelatedBySellerId()
	{
		$this->collBooksforsalesRelatedBySellerId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBooksforsalesRelatedBySellerId collection (array).
	 *
	 * By default this just sets the collBooksforsalesRelatedBySellerId collection to an empty array (like clearcollBooksforsalesRelatedBySellerId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBooksforsalesRelatedBySellerId()
	{
		$this->collBooksforsalesRelatedBySellerId = array();
	}

	/**
	 * Gets an array of Booksforsale objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related BooksforsalesRelatedBySellerId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Booksforsale[]
	 * @throws     PropelException
	 */
	public function getBooksforsalesRelatedBySellerId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBooksforsalesRelatedBySellerId === null) {
			if ($this->isNew()) {
			   $this->collBooksforsalesRelatedBySellerId = array();
			} else {

				$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

				BooksforsalePeer::addSelectColumns($criteria);
				$this->collBooksforsalesRelatedBySellerId = BooksforsalePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

				BooksforsalePeer::addSelectColumns($criteria);
				if (!isset($this->lastBooksforsaleRelatedBySellerIdCriteria) || !$this->lastBooksforsaleRelatedBySellerIdCriteria->equals($criteria)) {
					$this->collBooksforsalesRelatedBySellerId = BooksforsalePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBooksforsaleRelatedBySellerIdCriteria = $criteria;
		return $this->collBooksforsalesRelatedBySellerId;
	}

	/**
	 * Returns the number of related Booksforsale objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Booksforsale objects.
	 * @throws     PropelException
	 */
	public function countBooksforsalesRelatedBySellerId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBooksforsalesRelatedBySellerId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

				$count = BooksforsalePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

				if (!isset($this->lastBooksforsaleRelatedBySellerIdCriteria) || !$this->lastBooksforsaleRelatedBySellerIdCriteria->equals($criteria)) {
					$count = BooksforsalePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collBooksforsalesRelatedBySellerId);
				}
			} else {
				$count = count($this->collBooksforsalesRelatedBySellerId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Booksforsale object to this object
	 * through the Booksforsale foreign key attribute.
	 *
	 * @param      Booksforsale $l Booksforsale
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBooksforsaleRelatedBySellerId(Booksforsale $l)
	{
		if ($this->collBooksforsalesRelatedBySellerId === null) {
			$this->initBooksforsalesRelatedBySellerId();
		}
		if (!in_array($l, $this->collBooksforsalesRelatedBySellerId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBooksforsalesRelatedBySellerId, $l);
			$l->setUserRelatedBySellerId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related BooksforsalesRelatedBySellerId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getBooksforsalesRelatedBySellerIdJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBooksforsalesRelatedBySellerId === null) {
			if ($this->isNew()) {
				$this->collBooksforsalesRelatedBySellerId = array();
			} else {

				$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

				$this->collBooksforsalesRelatedBySellerId = BooksforsalePeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BooksforsalePeer::SELLER_ID, $this->id);

			if (!isset($this->lastBooksforsaleRelatedBySellerIdCriteria) || !$this->lastBooksforsaleRelatedBySellerIdCriteria->equals($criteria)) {
				$this->collBooksforsalesRelatedBySellerId = BooksforsalePeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastBooksforsaleRelatedBySellerIdCriteria = $criteria;

		return $this->collBooksforsalesRelatedBySellerId;
	}

	/**
	 * Clears out the collBooksforsalesRelatedByCheckedOutBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBooksforsalesRelatedByCheckedOutBy()
	 */
	public function clearBooksforsalesRelatedByCheckedOutBy()
	{
		$this->collBooksforsalesRelatedByCheckedOutBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBooksforsalesRelatedByCheckedOutBy collection (array).
	 *
	 * By default this just sets the collBooksforsalesRelatedByCheckedOutBy collection to an empty array (like clearcollBooksforsalesRelatedByCheckedOutBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBooksforsalesRelatedByCheckedOutBy()
	{
		$this->collBooksforsalesRelatedByCheckedOutBy = array();
	}

	/**
	 * Gets an array of Booksforsale objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related BooksforsalesRelatedByCheckedOutBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Booksforsale[]
	 * @throws     PropelException
	 */
	public function getBooksforsalesRelatedByCheckedOutBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBooksforsalesRelatedByCheckedOutBy === null) {
			if ($this->isNew()) {
			   $this->collBooksforsalesRelatedByCheckedOutBy = array();
			} else {

				$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

				BooksforsalePeer::addSelectColumns($criteria);
				$this->collBooksforsalesRelatedByCheckedOutBy = BooksforsalePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

				BooksforsalePeer::addSelectColumns($criteria);
				if (!isset($this->lastBooksforsaleRelatedByCheckedOutByCriteria) || !$this->lastBooksforsaleRelatedByCheckedOutByCriteria->equals($criteria)) {
					$this->collBooksforsalesRelatedByCheckedOutBy = BooksforsalePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBooksforsaleRelatedByCheckedOutByCriteria = $criteria;
		return $this->collBooksforsalesRelatedByCheckedOutBy;
	}

	/**
	 * Returns the number of related Booksforsale objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Booksforsale objects.
	 * @throws     PropelException
	 */
	public function countBooksforsalesRelatedByCheckedOutBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBooksforsalesRelatedByCheckedOutBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

				$count = BooksforsalePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

				if (!isset($this->lastBooksforsaleRelatedByCheckedOutByCriteria) || !$this->lastBooksforsaleRelatedByCheckedOutByCriteria->equals($criteria)) {
					$count = BooksforsalePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collBooksforsalesRelatedByCheckedOutBy);
				}
			} else {
				$count = count($this->collBooksforsalesRelatedByCheckedOutBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Booksforsale object to this object
	 * through the Booksforsale foreign key attribute.
	 *
	 * @param      Booksforsale $l Booksforsale
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBooksforsaleRelatedByCheckedOutBy(Booksforsale $l)
	{
		if ($this->collBooksforsalesRelatedByCheckedOutBy === null) {
			$this->initBooksforsalesRelatedByCheckedOutBy();
		}
		if (!in_array($l, $this->collBooksforsalesRelatedByCheckedOutBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBooksforsalesRelatedByCheckedOutBy, $l);
			$l->setUserRelatedByCheckedOutBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related BooksforsalesRelatedByCheckedOutBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getBooksforsalesRelatedByCheckedOutByJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBooksforsalesRelatedByCheckedOutBy === null) {
			if ($this->isNew()) {
				$this->collBooksforsalesRelatedByCheckedOutBy = array();
			} else {

				$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

				$this->collBooksforsalesRelatedByCheckedOutBy = BooksforsalePeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BooksforsalePeer::CHECKED_OUT_BY, $this->id);

			if (!isset($this->lastBooksforsaleRelatedByCheckedOutByCriteria) || !$this->lastBooksforsaleRelatedByCheckedOutByCriteria->equals($criteria)) {
				$this->collBooksforsalesRelatedByCheckedOutBy = BooksforsalePeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastBooksforsaleRelatedByCheckedOutByCriteria = $criteria;

		return $this->collBooksforsalesRelatedByCheckedOutBy;
	}

	/**
	 * Clears out the collComments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addComments()
	 */
	public function clearComments()
	{
		$this->collComments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collComments collection (array).
	 *
	 * By default this just sets the collComments collection to an empty array (like clearcollComments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initComments()
	{
		$this->collComments = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Comments from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getComments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
			   $this->collComments = array();
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collComments = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$this->collComments = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentCriteria = $criteria;
		return $this->collComments;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				$count = CommentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collComments);
				}
			} else {
				$count = count($this->collComments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addComment(Comment $l)
	{
		if ($this->collComments === null) {
			$this->initComments();
		}
		if (!in_array($l, $this->collComments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collComments, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Comments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getCommentsJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collComments === null) {
			if ($this->isNew()) {
				$this->collComments = array();
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				$this->collComments = CommentPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CommentPeer::USER_ID, $this->id);

			if (!isset($this->lastCommentCriteria) || !$this->lastCommentCriteria->equals($criteria)) {
				$this->collComments = CommentPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastCommentCriteria = $criteria;

		return $this->collComments;
	}

	/**
	 * Clears out the collSalessRelatedByBuyerId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSalessRelatedByBuyerId()
	 */
	public function clearSalessRelatedByBuyerId()
	{
		$this->collSalessRelatedByBuyerId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSalessRelatedByBuyerId collection (array).
	 *
	 * By default this just sets the collSalessRelatedByBuyerId collection to an empty array (like clearcollSalessRelatedByBuyerId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSalessRelatedByBuyerId()
	{
		$this->collSalessRelatedByBuyerId = array();
	}

	/**
	 * Gets an array of Sales objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SalessRelatedByBuyerId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Sales[]
	 * @throws     PropelException
	 */
	public function getSalessRelatedByBuyerId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSalessRelatedByBuyerId === null) {
			if ($this->isNew()) {
			   $this->collSalessRelatedByBuyerId = array();
			} else {

				$criteria->add(SalesPeer::BUYER_ID, $this->id);

				SalesPeer::addSelectColumns($criteria);
				$this->collSalessRelatedByBuyerId = SalesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SalesPeer::BUYER_ID, $this->id);

				SalesPeer::addSelectColumns($criteria);
				if (!isset($this->lastSalesRelatedByBuyerIdCriteria) || !$this->lastSalesRelatedByBuyerIdCriteria->equals($criteria)) {
					$this->collSalessRelatedByBuyerId = SalesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSalesRelatedByBuyerIdCriteria = $criteria;
		return $this->collSalessRelatedByBuyerId;
	}

	/**
	 * Returns the number of related Sales objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sales objects.
	 * @throws     PropelException
	 */
	public function countSalessRelatedByBuyerId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSalessRelatedByBuyerId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SalesPeer::BUYER_ID, $this->id);

				$count = SalesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SalesPeer::BUYER_ID, $this->id);

				if (!isset($this->lastSalesRelatedByBuyerIdCriteria) || !$this->lastSalesRelatedByBuyerIdCriteria->equals($criteria)) {
					$count = SalesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSalessRelatedByBuyerId);
				}
			} else {
				$count = count($this->collSalessRelatedByBuyerId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Sales object to this object
	 * through the Sales foreign key attribute.
	 *
	 * @param      Sales $l Sales
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSalesRelatedByBuyerId(Sales $l)
	{
		if ($this->collSalessRelatedByBuyerId === null) {
			$this->initSalessRelatedByBuyerId();
		}
		if (!in_array($l, $this->collSalessRelatedByBuyerId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSalessRelatedByBuyerId, $l);
			$l->setUserRelatedByBuyerId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SalessRelatedByBuyerId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSalessRelatedByBuyerIdJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSalessRelatedByBuyerId === null) {
			if ($this->isNew()) {
				$this->collSalessRelatedByBuyerId = array();
			} else {

				$criteria->add(SalesPeer::BUYER_ID, $this->id);

				$this->collSalessRelatedByBuyerId = SalesPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SalesPeer::BUYER_ID, $this->id);

			if (!isset($this->lastSalesRelatedByBuyerIdCriteria) || !$this->lastSalesRelatedByBuyerIdCriteria->equals($criteria)) {
				$this->collSalessRelatedByBuyerId = SalesPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastSalesRelatedByBuyerIdCriteria = $criteria;

		return $this->collSalessRelatedByBuyerId;
	}

	/**
	 * Clears out the collSalessRelatedBySellerId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSalessRelatedBySellerId()
	 */
	public function clearSalessRelatedBySellerId()
	{
		$this->collSalessRelatedBySellerId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSalessRelatedBySellerId collection (array).
	 *
	 * By default this just sets the collSalessRelatedBySellerId collection to an empty array (like clearcollSalessRelatedBySellerId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSalessRelatedBySellerId()
	{
		$this->collSalessRelatedBySellerId = array();
	}

	/**
	 * Gets an array of Sales objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SalessRelatedBySellerId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Sales[]
	 * @throws     PropelException
	 */
	public function getSalessRelatedBySellerId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSalessRelatedBySellerId === null) {
			if ($this->isNew()) {
			   $this->collSalessRelatedBySellerId = array();
			} else {

				$criteria->add(SalesPeer::SELLER_ID, $this->id);

				SalesPeer::addSelectColumns($criteria);
				$this->collSalessRelatedBySellerId = SalesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SalesPeer::SELLER_ID, $this->id);

				SalesPeer::addSelectColumns($criteria);
				if (!isset($this->lastSalesRelatedBySellerIdCriteria) || !$this->lastSalesRelatedBySellerIdCriteria->equals($criteria)) {
					$this->collSalessRelatedBySellerId = SalesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSalesRelatedBySellerIdCriteria = $criteria;
		return $this->collSalessRelatedBySellerId;
	}

	/**
	 * Returns the number of related Sales objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sales objects.
	 * @throws     PropelException
	 */
	public function countSalessRelatedBySellerId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSalessRelatedBySellerId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SalesPeer::SELLER_ID, $this->id);

				$count = SalesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SalesPeer::SELLER_ID, $this->id);

				if (!isset($this->lastSalesRelatedBySellerIdCriteria) || !$this->lastSalesRelatedBySellerIdCriteria->equals($criteria)) {
					$count = SalesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSalessRelatedBySellerId);
				}
			} else {
				$count = count($this->collSalessRelatedBySellerId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Sales object to this object
	 * through the Sales foreign key attribute.
	 *
	 * @param      Sales $l Sales
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSalesRelatedBySellerId(Sales $l)
	{
		if ($this->collSalessRelatedBySellerId === null) {
			$this->initSalessRelatedBySellerId();
		}
		if (!in_array($l, $this->collSalessRelatedBySellerId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSalessRelatedBySellerId, $l);
			$l->setUserRelatedBySellerId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SalessRelatedBySellerId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSalessRelatedBySellerIdJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSalessRelatedBySellerId === null) {
			if ($this->isNew()) {
				$this->collSalessRelatedBySellerId = array();
			} else {

				$criteria->add(SalesPeer::SELLER_ID, $this->id);

				$this->collSalessRelatedBySellerId = SalesPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SalesPeer::SELLER_ID, $this->id);

			if (!isset($this->lastSalesRelatedBySellerIdCriteria) || !$this->lastSalesRelatedBySellerIdCriteria->equals($criteria)) {
				$this->collSalessRelatedBySellerId = SalesPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastSalesRelatedBySellerIdCriteria = $criteria;

		return $this->collSalessRelatedBySellerId;
	}

	/**
	 * Clears out the collWishlists collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWishlists()
	 */
	public function clearWishlists()
	{
		$this->collWishlists = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWishlists collection (array).
	 *
	 * By default this just sets the collWishlists collection to an empty array (like clearcollWishlists());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWishlists()
	{
		$this->collWishlists = array();
	}

	/**
	 * Gets an array of Wishlist objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Wishlists from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Wishlist[]
	 * @throws     PropelException
	 */
	public function getWishlists($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWishlists === null) {
			if ($this->isNew()) {
			   $this->collWishlists = array();
			} else {

				$criteria->add(WishlistPeer::USER_ID, $this->id);

				WishlistPeer::addSelectColumns($criteria);
				$this->collWishlists = WishlistPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WishlistPeer::USER_ID, $this->id);

				WishlistPeer::addSelectColumns($criteria);
				if (!isset($this->lastWishlistCriteria) || !$this->lastWishlistCriteria->equals($criteria)) {
					$this->collWishlists = WishlistPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWishlistCriteria = $criteria;
		return $this->collWishlists;
	}

	/**
	 * Returns the number of related Wishlist objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Wishlist objects.
	 * @throws     PropelException
	 */
	public function countWishlists(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWishlists === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WishlistPeer::USER_ID, $this->id);

				$count = WishlistPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WishlistPeer::USER_ID, $this->id);

				if (!isset($this->lastWishlistCriteria) || !$this->lastWishlistCriteria->equals($criteria)) {
					$count = WishlistPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collWishlists);
				}
			} else {
				$count = count($this->collWishlists);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Wishlist object to this object
	 * through the Wishlist foreign key attribute.
	 *
	 * @param      Wishlist $l Wishlist
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWishlist(Wishlist $l)
	{
		if ($this->collWishlists === null) {
			$this->initWishlists();
		}
		if (!in_array($l, $this->collWishlists, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWishlists, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Wishlists from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getWishlistsJoinBook($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWishlists === null) {
			if ($this->isNew()) {
				$this->collWishlists = array();
			} else {

				$criteria->add(WishlistPeer::USER_ID, $this->id);

				$this->collWishlists = WishlistPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(WishlistPeer::USER_ID, $this->id);

			if (!isset($this->lastWishlistCriteria) || !$this->lastWishlistCriteria->equals($criteria)) {
				$this->collWishlists = WishlistPeer::doSelectJoinBook($criteria, $con, $join_behavior);
			}
		}
		$this->lastWishlistCriteria = $criteria;

		return $this->collWishlists;
	}

	/**
	 * Clears out the collCoursess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCoursess()
	 */
	public function clearCoursess()
	{
		$this->collCoursess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCoursess collection (array).
	 *
	 * By default this just sets the collCoursess collection to an empty array (like clearcollCoursess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCoursess()
	{
		$this->collCoursess = array();
	}

	/**
	 * Gets an array of Courses objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related Coursess from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Courses[]
	 * @throws     PropelException
	 */
	public function getCoursess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCoursess === null) {
			if ($this->isNew()) {
			   $this->collCoursess = array();
			} else {

				$criteria->add(CoursesPeer::USER_ID, $this->id);

				CoursesPeer::addSelectColumns($criteria);
				$this->collCoursess = CoursesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CoursesPeer::USER_ID, $this->id);

				CoursesPeer::addSelectColumns($criteria);
				if (!isset($this->lastCoursesCriteria) || !$this->lastCoursesCriteria->equals($criteria)) {
					$this->collCoursess = CoursesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCoursesCriteria = $criteria;
		return $this->collCoursess;
	}

	/**
	 * Returns the number of related Courses objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Courses objects.
	 * @throws     PropelException
	 */
	public function countCoursess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCoursess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CoursesPeer::USER_ID, $this->id);

				$count = CoursesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CoursesPeer::USER_ID, $this->id);

				if (!isset($this->lastCoursesCriteria) || !$this->lastCoursesCriteria->equals($criteria)) {
					$count = CoursesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCoursess);
				}
			} else {
				$count = count($this->collCoursess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Courses object to this object
	 * through the Courses foreign key attribute.
	 *
	 * @param      Courses $l Courses
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCourses(Courses $l)
	{
		if ($this->collCoursess === null) {
			$this->initCoursess();
		}
		if (!in_array($l, $this->collCoursess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCoursess, $l);
			$l->setUser($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collBooksforsalesRelatedBySellerId) {
				foreach ((array) $this->collBooksforsalesRelatedBySellerId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBooksforsalesRelatedByCheckedOutBy) {
				foreach ((array) $this->collBooksforsalesRelatedByCheckedOutBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collComments) {
				foreach ((array) $this->collComments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSalessRelatedByBuyerId) {
				foreach ((array) $this->collSalessRelatedByBuyerId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSalessRelatedBySellerId) {
				foreach ((array) $this->collSalessRelatedBySellerId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWishlists) {
				foreach ((array) $this->collWishlists as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCoursess) {
				foreach ((array) $this->collCoursess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collBooksforsalesRelatedBySellerId = null;
		$this->collBooksforsalesRelatedByCheckedOutBy = null;
		$this->collComments = null;
		$this->collSalessRelatedByBuyerId = null;
		$this->collSalessRelatedBySellerId = null;
		$this->collWishlists = null;
		$this->collCoursess = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUser:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUser::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUser
